# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from vectornav/satraw.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class satraw(genpy.Message):
  _md5sum = "edc0770899cab3f86653d0962a754099"
  _type = "vectornav/satraw"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8                sys
uint8                svId
uint8                freq
uint8                chan
int8                 slot
uint8                cno
uint16               flags
float64              pr
float64              cp
float32              dp
"""
  __slots__ = ['sys','svId','freq','chan','slot','cno','flags','pr','cp','dp']
  _slot_types = ['uint8','uint8','uint8','uint8','int8','uint8','uint16','float64','float64','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       sys,svId,freq,chan,slot,cno,flags,pr,cp,dp

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(satraw, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.sys is None:
        self.sys = 0
      if self.svId is None:
        self.svId = 0
      if self.freq is None:
        self.freq = 0
      if self.chan is None:
        self.chan = 0
      if self.slot is None:
        self.slot = 0
      if self.cno is None:
        self.cno = 0
      if self.flags is None:
        self.flags = 0
      if self.pr is None:
        self.pr = 0.
      if self.cp is None:
        self.cp = 0.
      if self.dp is None:
        self.dp = 0.
    else:
      self.sys = 0
      self.svId = 0
      self.freq = 0
      self.chan = 0
      self.slot = 0
      self.cno = 0
      self.flags = 0
      self.pr = 0.
      self.cp = 0.
      self.dp = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4BbBH2df().pack(_x.sys, _x.svId, _x.freq, _x.chan, _x.slot, _x.cno, _x.flags, _x.pr, _x.cp, _x.dp))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.sys, _x.svId, _x.freq, _x.chan, _x.slot, _x.cno, _x.flags, _x.pr, _x.cp, _x.dp,) = _get_struct_4BbBH2df().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4BbBH2df().pack(_x.sys, _x.svId, _x.freq, _x.chan, _x.slot, _x.cno, _x.flags, _x.pr, _x.cp, _x.dp))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.sys, _x.svId, _x.freq, _x.chan, _x.slot, _x.cno, _x.flags, _x.pr, _x.cp, _x.dp,) = _get_struct_4BbBH2df().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4BbBH2df = None
def _get_struct_4BbBH2df():
    global _struct_4BbBH2df
    if _struct_4BbBH2df is None:
        _struct_4BbBH2df = struct.Struct("<4BbBH2df")
    return _struct_4BbBH2df
