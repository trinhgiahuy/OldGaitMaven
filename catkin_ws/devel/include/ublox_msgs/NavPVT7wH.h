// Generated by gencpp from file ublox_msgs/NavPVT7wH.msg
// DO NOT EDIT!


#ifndef UBLOX_MSGS_MESSAGE_NAVPVT7WH_H
#define UBLOX_MSGS_MESSAGE_NAVPVT7WH_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <ublox_msgs/NavPVT7.h>

namespace ublox_msgs
{
template <class ContainerAllocator>
struct NavPVT7wH_
{
  typedef NavPVT7wH_<ContainerAllocator> Type;

  NavPVT7wH_()
    : header()
    , pvt()  {
    }
  NavPVT7wH_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , pvt(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::ublox_msgs::NavPVT7_<ContainerAllocator>  _pvt_type;
  _pvt_type pvt;




  typedef boost::shared_ptr< ::ublox_msgs::NavPVT7wH_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ublox_msgs::NavPVT7wH_<ContainerAllocator> const> ConstPtr;

}; // struct NavPVT7wH_

typedef ::ublox_msgs::NavPVT7wH_<std::allocator<void> > NavPVT7wH;

typedef boost::shared_ptr< ::ublox_msgs::NavPVT7wH > NavPVT7wHPtr;
typedef boost::shared_ptr< ::ublox_msgs::NavPVT7wH const> NavPVT7wHConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ublox_msgs::NavPVT7wH_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ublox_msgs::NavPVT7wH_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ublox_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'ublox_msgs': ['/home/pi/catkin_ws/src/ublox/ublox_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ublox_msgs::NavPVT7wH_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ublox_msgs::NavPVT7wH_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ublox_msgs::NavPVT7wH_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ublox_msgs::NavPVT7wH_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ublox_msgs::NavPVT7wH_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ublox_msgs::NavPVT7wH_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ublox_msgs::NavPVT7wH_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2c1c9c92572865d971d77c93b19993af";
  }

  static const char* value(const ::ublox_msgs::NavPVT7wH_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2c1c9c92572865d9ULL;
  static const uint64_t static_value2 = 0x71d77c93b19993afULL;
};

template<class ContainerAllocator>
struct DataType< ::ublox_msgs::NavPVT7wH_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ublox_msgs/NavPVT7wH";
  }

  static const char* value(const ::ublox_msgs::NavPVT7wH_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ublox_msgs::NavPVT7wH_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
NavPVT7 pvt\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: ublox_msgs/NavPVT7\n\
# NAV-PVT (0x01 0x07)\n\
# Navigation Position Velocity Time Solution Firmware version 7\n\
#\n\
# Note that during a leap second there may be more (or less) than 60 seconds in\n\
# a minute; see the description of leap seconds for details.\n\
#\n\
# This message combines Position, velocity and time solution in LLH, \n\
# including accuracy figures\n\
#\n\
# WARNING: For firmware version 7, this message is a different length.\n\
#\n\
\n\
uint8 CLASS_ID = 1\n\
uint8 MESSAGE_ID = 7\n\
\n\
uint32 iTOW             # GPS Millisecond time of week [ms]\n\
uint16 year             # Year (UTC)\n\
uint8 month             # Month, range 1..12 (UTC)\n\
uint8 day               # Day of month, range 1..31 (UTC)\n\
uint8 hour              # Hour of day, range 0..23 (UTC)\n\
uint8 min               # Minute of hour, range 0..59 (UTC)\n\
uint8 sec               # Seconds of minute, range 0..60 (UTC)\n\
\n\
uint8 valid             # Validity flags\n\
uint8 VALID_DATE = 1            # Valid UTC Date\n\
uint8 VALID_TIME = 2            # Valid \n\
uint8 VALID_FULLY_RESOLVED = 4  # UTC time of day has been fully resolved \n\
                                # (no seconds uncertainty)\n\
uint8 VALID_MAG = 8             # Valid Magnetic Declination\n\
\n\
uint32 tAcc             # time accuracy estimate [ns] (UTC)\n\
int32 nano              # fraction of a second [ns], range -1e9 .. 1e9 (UTC)\n\
\n\
uint8 fixType           # GNSS fix Type, range 0..5\n\
uint8 FIX_TYPE_NO_FIX = 0\n\
uint8 FIX_TYPE_DEAD_RECKONING_ONLY = 1\n\
uint8 FIX_TYPE_2D = 2                           # Signal from only 3 SVs, \n\
                                                # constant altitude assumed\n\
uint8 FIX_TYPE_3D = 3\n\
uint8 FIX_TYPE_GNSS_DEAD_RECKONING_COMBINED = 4 # GNSS + Dead reckoning\n\
uint8 FIX_TYPE_TIME_ONLY = 5                    # Time only fix (High precision \n\
                                                # devices)\n\
\n\
uint8 flags             # Fix Status Flags\n\
uint8 FLAGS_GNSS_FIX_OK = 1          # i.e. within DOP & accuracy masks\n\
uint8 FLAGS_DIFF_SOLN = 2            # DGPS used\n\
uint8 FLAGS_PSM_MASK = 28            # Power Save Mode\n\
uint8 PSM_OFF = 0                       # PSM is off\n\
uint8 PSM_ENABLED = 4                   # Enabled (state before acquisition)\n\
uint8 PSM_ACQUIRED = 8                  # Acquisition\n\
uint8 PSM_TRACKING = 12                 # Tracking\n\
uint8 PSM_POWER_OPTIMIZED_TRACKING = 16 # Power Optimized Tracking\n\
uint8 PSM_INACTIVE = 20                 # Inactive\n\
uint8 FLAGS_HEAD_VEH_VALID = 32         # heading of vehicle is valid\n\
uint8 FLAGS_CARRIER_PHASE_MASK = 192 # Carrier Phase Range Solution Status     \n\
uint8 CARRIER_PHASE_NO_SOLUTION = 0     # no carrier phase range solution\n\
uint8 CARRIER_PHASE_FLOAT = 64          # carrier phase float solution (no fixed \n\
                                        # integer measurements have been used to \n\
                                        # calculate the solution)\n\
uint8 CARRIER_PHASE_FIXED = 128         # fixed solution (>=1 fixed integer \n\
                                        # carrier phase range measurements have \n\
                                        # been used to calculate  the solution)\n\
\n\
uint8 flags2            # Additional Flags\n\
uint8 FLAGS2_CONFIRMED_AVAILABLE = 32   # information about UTC Date and Time of \n\
                                        # Day validity confirmation is available\n\
uint8 FLAGS2_CONFIRMED_DATE = 64        # UTC Date validity could be confirmed\n\
uint8 FLAGS2_CONFIRMED_TIME = 128       # UTC Time of Day could be confirmed\n\
\n\
uint8 numSV             # Number of SVs used in Nav Solution\n\
int32 lon               # Longitude [deg / 1e-7]\n\
int32 lat               # Latitude [deg / 1e-7]\n\
int32 height            # Height above Ellipsoid [mm]\n\
int32 hMSL              # Height above mean sea level [mm]\n\
uint32 hAcc             # Horizontal Accuracy Estimate [mm]\n\
uint32 vAcc             # Vertical Accuracy Estimate [mm]\n\
\n\
int32 velN              # NED north velocity [mm/s]\n\
int32 velE              # NED east velocity [mm/s]\n\
int32 velD              # NED down velocity [mm/s]\n\
int32 gSpeed            # Ground Speed (2-D) [mm/s]\n\
int32 heading           # Heading of motion 2-D [deg / 1e-5]\n\
uint32 sAcc             # Speed Accuracy Estimate [mm/s]\n\
uint32 headAcc          # Heading Accuracy Estimate (both motion & vehicle) \n\
                        # [deg / 1e-5]\n\
\n\
uint16 pDOP             # Position DOP [1 / 0.01]\n\
uint8[6] reserved1      # Reserved\n\
";
  }

  static const char* value(const ::ublox_msgs::NavPVT7wH_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ublox_msgs::NavPVT7wH_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.pvt);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NavPVT7wH_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ublox_msgs::NavPVT7wH_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ublox_msgs::NavPVT7wH_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "pvt: ";
    s << std::endl;
    Printer< ::ublox_msgs::NavPVT7_<ContainerAllocator> >::stream(s, indent + "  ", v.pvt);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UBLOX_MSGS_MESSAGE_NAVPVT7WH_H
