// Generated by gencpp from file vectornav/satraw.msg
// DO NOT EDIT!


#ifndef VECTORNAV_MESSAGE_SATRAW_H
#define VECTORNAV_MESSAGE_SATRAW_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vectornav
{
template <class ContainerAllocator>
struct satraw_
{
  typedef satraw_<ContainerAllocator> Type;

  satraw_()
    : sys(0)
    , svId(0)
    , freq(0)
    , chan(0)
    , slot(0)
    , cno(0)
    , flags(0)
    , pr(0.0)
    , cp(0.0)
    , dp(0.0)  {
    }
  satraw_(const ContainerAllocator& _alloc)
    : sys(0)
    , svId(0)
    , freq(0)
    , chan(0)
    , slot(0)
    , cno(0)
    , flags(0)
    , pr(0.0)
    , cp(0.0)
    , dp(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _sys_type;
  _sys_type sys;

   typedef uint8_t _svId_type;
  _svId_type svId;

   typedef uint8_t _freq_type;
  _freq_type freq;

   typedef uint8_t _chan_type;
  _chan_type chan;

   typedef int8_t _slot_type;
  _slot_type slot;

   typedef uint8_t _cno_type;
  _cno_type cno;

   typedef uint16_t _flags_type;
  _flags_type flags;

   typedef double _pr_type;
  _pr_type pr;

   typedef double _cp_type;
  _cp_type cp;

   typedef float _dp_type;
  _dp_type dp;




  typedef boost::shared_ptr< ::vectornav::satraw_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vectornav::satraw_<ContainerAllocator> const> ConstPtr;

}; // struct satraw_

typedef ::vectornav::satraw_<std::allocator<void> > satraw;

typedef boost::shared_ptr< ::vectornav::satraw > satrawPtr;
typedef boost::shared_ptr< ::vectornav::satraw const> satrawConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vectornav::satraw_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vectornav::satraw_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace vectornav

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'vectornav': ['/home/pi/catkin_ws/src/vectornav/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::vectornav::satraw_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vectornav::satraw_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vectornav::satraw_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vectornav::satraw_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vectornav::satraw_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vectornav::satraw_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vectornav::satraw_<ContainerAllocator> >
{
  static const char* value()
  {
    return "edc0770899cab3f86653d0962a754099";
  }

  static const char* value(const ::vectornav::satraw_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xedc0770899cab3f8ULL;
  static const uint64_t static_value2 = 0x6653d0962a754099ULL;
};

template<class ContainerAllocator>
struct DataType< ::vectornav::satraw_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vectornav/satraw";
  }

  static const char* value(const ::vectornav::satraw_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vectornav::satraw_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8                sys\n\
uint8                svId\n\
uint8                freq\n\
uint8                chan\n\
int8                 slot\n\
uint8                cno\n\
uint16               flags\n\
float64              pr\n\
float64              cp\n\
float32              dp\n\
";
  }

  static const char* value(const ::vectornav::satraw_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vectornav::satraw_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sys);
      stream.next(m.svId);
      stream.next(m.freq);
      stream.next(m.chan);
      stream.next(m.slot);
      stream.next(m.cno);
      stream.next(m.flags);
      stream.next(m.pr);
      stream.next(m.cp);
      stream.next(m.dp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct satraw_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vectornav::satraw_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vectornav::satraw_<ContainerAllocator>& v)
  {
    s << indent << "sys: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sys);
    s << indent << "svId: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.svId);
    s << indent << "freq: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.freq);
    s << indent << "chan: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.chan);
    s << indent << "slot: ";
    Printer<int8_t>::stream(s, indent + "  ", v.slot);
    s << indent << "cno: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cno);
    s << indent << "flags: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.flags);
    s << indent << "pr: ";
    Printer<double>::stream(s, indent + "  ", v.pr);
    s << indent << "cp: ";
    Printer<double>::stream(s, indent + "  ", v.cp);
    s << indent << "dp: ";
    Printer<float>::stream(s, indent + "  ", v.dp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VECTORNAV_MESSAGE_SATRAW_H
